{
  "general": {
    "icons": [
      {
        "href": "https://github.githubassets.com/favicons/favicon.svg",
        "type": "image/svg+xml"
      }
    ],
    "canonical": "https://github.com/duetds/date-picker",
    "description": "Duet Date Picker is an open source version of Duet Design System’s accessible date picker. Try live example at https://duetds.github.io/date-picker/ - duetds/date-picker",
    "title": "GitHub - duetds/date-picker: Duet Date Picker is an open source version of Duet Design System’s accessible date picker. Try live example at https://duetds.github.io/date-picker/",
    "lang": "en"
  },
  "openGraph": {
    "app_id": "1401488693436528",
    "image": {
      "url": "https://avatars3.githubusercontent.com/u/59133187?s=400&v=4"
    },
    "site_name": "GitHub",
    "type": "object",
    "title": "duetds/date-picker",
    "url": "https://github.com/duetds/date-picker",
    "description": "Duet Date Picker is an open source version of Duet Design System’s accessible date picker. Try live example at https://duetds.github.io/date-picker/ - duetds/date-picker"
  },
  "schemaOrg": {
    "items": [
      {
        "properties": {
          "author": [
            "\n      duetds\n    "
          ],
          "name": [
            "\n    date-picker\n  "
          ],
          "text": [
            "   \nDuet Date Picker\nDuet Date Picker is an open source version of Duet Design System’s accessible date picker. Duet Date Picker can be implemented and used across any JavaScript framework or no framework at all. We accomplish this by using standardized web platform APIs and Web Components.\nWhy yet another date picker? Our team working on Duet Design System couldn’t find an existing date picker that would’ve ticked all the requirements we had for accessibility (supporting WCAG 2.1 as well as we can), so we decided to build one and open source it so that others could benefit from this work as well.\nDuet Date Picker comes with built-in functionality that allows you to set a minimum and a maximum allowed date. These settings can be combined or used alone, depending on the need. Please note that the date values must be passed in IS0-8601 format: YYYY-MM-DD.\nRead getting started instructions ›\n\n\nLearn more about Duet ›\n\nSections in this documentation:\n\nIntroduction\nLive demo\nFeatures\nBrowser support\nScreen reader support\nKeyboard support\nGetting started\nProperties\nEvents\nMethods\nInstallation\nUsage with basic HTML\nUsage with Angular\nUsage with Vue.js\nUsage with React\nUsage with Ember\nIE11 and Edge 17/18 polyfills\nUsing events\nTheming\nLocalization\nServer side rendering\nSingle file bundle\nOptimizing CDN performance\nContributing\nChangelog\nRoadmap\nLicense\n\nLive demo\n\nhttps://duetds.github.io/date-picker/\n\nFeatures\n\nCan be used with any JavaScript framework.\nNo external dependencies.\nWeighs only ~10kb minified and Gzip’ed (this includes all styles and icons).\nBuilt with accessibility in mind.\nSupports all modern browsers and screen readers.\nAdditionally, limited support offered for IE11 and Edge 17+.\nAllows theming using CSS Custom Properties.\nSupport for localization.\nCustomizable date parsing and formatting.\nSupport for changing the first day of the week.\nComes with modified interface for mobile devices to provide better user experience.\nSupports touch gestures for changing months and closing the picker.\nBuilt using Stencil.js and Web Components.\nFree to use under the MIT license.\n\nBrowser support\n\nGoogle Chrome 61+\nApple Safari 10+\nFirefox 63+\nMicrosoft Edge 17+\nOpera 63+\nSamsung Browser 8.2+\nInternet Explorer 11\n\nScreen Reader support\nWe offer support for the following screen readers. For more information about the level of support and possible issues with the implementation, please refer to the included accessibility audit.\n\nVoiceOver on macOS and iOS\nTalkBack on Android\nNVDA on Windows\nJaws on Windows\n\nKeyboard support\nDuet Date Picker’s keyboard support is built to closely follow W3C Date Picker Dialog example with some small exceptions to e.g. better support iOS VoiceOver and Android TalkBack.\nChoose date button\n\nSpace, Enter: Opens the date picker dialog and moves focus to the first select menu in the dialog.\n\nDate picker dialog\n\nEsc: Closes the date picker dialog and moves focus back to the “choose date” button.\nTab: Moves focus to the next element in the dialog. Please note since the calendar uses role=\"grid\", only one button in the calendar grid is in the tab sequence. Additionally, if focus is on the last focusable element, focus is next moved back to the first focusable element inside the date picker dialog.\nShift + Tab: Same as above, but in reverse order.\n\nDate picker dialog: Month/year buttons\n\nSpace, Enter: Changes the month and/or year displayed.\n\nDate picker dialog: Date grid\n\nSpace, Enter: Selects a date, closes the dialog, and moves focus back to the “Choose Date” button. Additionally updates the value of the Duet Date Picker input with the selected date, and adds selected date to “Choose Date” button label.\nArrow up: Moves focus to the same day of the previous week.\nArrow down: Moves focus to the same day of the next week.\nArrow right: Moves focus to the next day.\nArrow left: Moves focus to the previous day.\nHome: Moves focus to the first day (e.g Monday) of the current week.\nEnd: Moves focus to the last day (e.g. Sunday) of the current week.\nPage Up: Changes the grid of dates to the previous month and sets focus on the same day of the same week.\nShift + Page Up: Changes the grid of dates to the previous year and sets focus on the same day of the same week.\nPage Down: Changes the grid of dates to the next month and sets focus on the same day of the same week.\nShift + Page Down: Changes the grid of dates to the next year and sets focus on the same day of the same week.\n\nDate picker dialog: Close button\n\nSpace, Enter:  Closes the dialog, moves focus to “choose date” button, but does not update the date in input.\n\nGetting started\nIntegrating Duet Date Picker to a project without a JavaScript framework is very straight forward. If you’re working on a simple HTML page, you can start using Duet Date Picker immediately by adding these tags to the <head>:\n<script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/@duetds/date-picker@1.0.2/dist/duet/duet.esm.js\"></script>\n<script nomodule src=\"https://cdn.jsdelivr.net/npm/@duetds/date-picker@1.0.2/dist/duet/duet.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@duetds/date-picker@1.0.2/dist/duet/themes/default.css\" />\nOnce included, Duet Date Picker can be used in your markup like any other regular HTML element:\n<label for=\"date\">Choose a date</label>\n<duet-date-picker identifier=\"date\"></duet-date-picker>\nPlease note: Importing the CSS file is optional and only needed if you’re planning on using the default theme. See theming section for more information. Additionally, while the above method is the easiest and fastest way to get started, you can also install Duet Date Picker via NPM. Scroll down for the installation instructions.\nProperties\n\n\n\nProperty\nAttribute\nDescription\nType\nDefault\n\n\n\n\ndateAdapter\n--\nDate adapter, for custom parsing/formatting. Must be object with a parse function which accepts a string and returns a Date, and a format function which accepts a Date and returns a string. Default is IS0-8601 parsing and formatting.\nDuetDateAdapter\nisoAdapter\n\n\ndirection\ndirection\nForces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.\n\"left\" | \"right\"\n\"right\"\n\n\ndisabled\ndisabled\nMakes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.\nboolean\nfalse\n\n\nfirstDayOfWeek\nfirst-day-of-week\nWhich day is considered first day of the week? 0 for Sunday, 1 for Monday, etc. Default is Monday.\nDaysOfWeek.Friday | DaysOfWeek.Monday | DaysOfWeek.Saturday | DaysOfWeek.Sunday | DaysOfWeek.Thursday | DaysOfWeek.Tuesday | DaysOfWeek.Wednesday\nDaysOfWeek.Monday\n\n\nidentifier\nidentifier\nAdds a unique identifier for the date picker input. Use this instead of html id attribute.\nstring\n\"\"\n\n\nlocalization\n--\nButton labels, day names, month names, etc, used for localization. Default is English.\n{ buttonLabel: string; placeholder: string; selectedDateMessage: string; prevMonthLabel: string; nextMonthLabel: string; monthSelectLabel: string; yearSelectLabel: string; closeLabel: string; keyboardInstruction: string; calendarHeading: string; dayNames: DayNames; monthNames: MonthsNames; monthNamesShort: MonthsNames; }\ndefaultLocalization\n\n\nmax\nmax\nMaximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.\nstring\n\"\"\n\n\nmin\nmin\nMinimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.\nstring\n\"\"\n\n\nname\nname\nName of the date picker input.\nstring\n\"date\"\n\n\nrole\nrole\nDefines a specific role attribute for the date picker input.\nstring\nundefined\n\n\nvalue\nvalue\nDate value. Must be in IS0-8601 format: YYYY-MM-DD.\nstring\n\"\"\n\n\n\nEvents\n\n\n\nEvent\nDescription\nType\n\n\n\n\nduetBlur\nEvent emitted the date picker input is blurred.\nCustomEvent<{ component: \"duet-date-picker\"; }>\n\n\nduetChange\nEvent emitted when a date is selected.\nCustomEvent<{ component: \"duet-date-picker\"; valueAsDate: Date; value: string; }>\n\n\nduetFocus\nEvent emitted the date picker input is focused.\nCustomEvent<{ component: \"duet-date-picker\"; }>\n\n\n\nMethods\nhide(moveFocusToButton?: boolean) => Promise<void>\nHide the calendar modal. Set moveFocusToButton to false to prevent focus\nreturning to the date picker's button. Default is true.\nReturns\nType: Promise<void>\nsetFocus() => Promise<void>\nSets focus on the date picker's input. Use this method instead of the global focus().\nReturns\nType: Promise<void>\nshow() => Promise<void>\nShow the calendar modal, moving focus to the calendar inside.\nReturns\nType: Promise<void>\nInstallation\nBefore moving further, please make sure you have Node.js installed on your machine. You can install the latest version through their website. If you’re planning on using Duet Date Picker in a project that doesn’t yet use Node Package Manager, you’ll have to first create a package.json file. To do so, run npm init and follow the steps provided.\nOnce finished, you can install Duet Date Picker by running:\n# WEB COMPONENT for HTML, Ember, Vue.js, React, Angular and Vanilla JS:\nnpm install @duetds/date-picker\nUsage with basic HTML\nPlease note: We recommend the usage of CDN like JSDelivr over the below approach if you’re not server side rendering Duet Date Picker. See getting started section to find the correct script tags.\nOnce you’ve installed @duetds/date-picker package into your project, it’s recommended to create a copy task that copies Duet Date Picker component from node_modules to a location you’ve specified. One such tool that can do this is NCP. You can install ncp by running:\nnpm install ncp --save-dev\nOnce installed, add a script to your package.json that copies the component library from Duet’s package into a location you’ve specified:\n\"scripts\": {\n  \"copy:duet-date-picker\": \"ncp node_modules/@duetds/date-picker/dist src/SPECIFY_PATH\"\n}\nYou can call this script while starting up your app to make sure you’ve always got the latest code copied over. If you’re using an UNIX-like environment, you can use & as the separator:\n\"start\": \"copy:duet-date-picker & dev\"\nOtherwise, if you need a cross-platform solution, use npm-run-all module:\n\"start\": \"npm-run-all copy:duet-date-picker dev\"\nOnce you have a copy task in place and have copied Duet Date Picker over, you can put tags similar to these in the <head> of your index.html (importing the CSS file is optional and only needed if you’re planning on using the default theme. See theming section for more information):\n<script type=\"module\" src=\"SPECIFY_YOUR_PATH/duet.esm.js\"></script>\n<script nomodule src=\"SPECIFY_YOUR_PATH/duet.js\"></script>\n<link rel=\"stylesheet\" href=\"SPECIFY_YOUR_PATH/duet.css\" />\nOnce included, Duet Date Picker can be used in your basic HTML markup as in the following example:\n<label for=\"date\">Choose a date</label>\n<duet-date-picker identifier=\"date\"></duet-date-picker>\nTo know when this tag name becomes defined, you can use window.customElements.whenDefined(). It returns a Promise that resolves when the element becomes defined:\ncustomElements.whenDefined(\"duet-date-picker\").then(() => {\n  document.querySelector(\"duet-date-picker\").show()\n});\nUsage with Angular\nBefore you can use Duet Date Picker in Angular, you must import and add Angular’s CUSTOM_ELEMENTS_SCHEMA. This allows the use of Web Components in HTML markup, without the compiler producing errors. The CUSTOM_ELEMENTS_SCHEMA needs to be included in any module that uses custom elements. Typically, this can be added to AppModule:\n// ...\n// Import custom elements schema\nimport { CUSTOM_ELEMENTS_SCHEMA } from \"@angular/core\";\n\n@NgModule({\n  // ...\n  // Add custom elements schema to NgModule\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AppModule { }\nThe final step is to load and register Duet Date Picker in the browser. @duetds/date-picker includes a main function that handles this. That function is called defineCustomElements() and it needs to be called once during the bootstrapping of your application. One convenient place to do this is in main.ts as such:\n// Import Duet Date Picker\nimport { defineCustomElements } from \"@duetds/date-picker/dist/loader\";\n// ...\n// Register Duet Date Picker\ndefineCustomElements(window);\nOnce included, Duet Date Picker can be used in your HTML markup as in the following example:\n<label for=\"date\">Choose a date</label>\n<duet-date-picker identifier=\"date\"></duet-date-picker>\nPlease note that you need to also import duet.css separately if you want to use the default theme. See theming section for more information.\nAccessing using ViewChild and ViewChildren\nOnce included, components could also be referenced in your code using ViewChild and ViewChildren as shown in the Stencil.js documentation.\nUsage with Vue.js\nTo integrate @duetds/date-picker into a Vue.js application, edit src/main.js to include:\n// Import Duet Date Picker\nimport { defineCustomElements } from \"@duetds/date-picker/dist/loader\";\n\n// ...\n// configure Vue.js to ignore Duet Date Picker\nVue.config.ignoredElements = [/duet-\\w*/];\n\n// Register Duet Date Picker\ndefineCustomElements(window);\n\nnew Vue({\n    render: h => h(App)\n}).$mount(\"#app\");\nOnce included, Duet Date Picker can be used in your HTML markup as in the following example:\n<label for=\"date\">Choose a date</label>\n<duet-date-picker identifier=\"date\"></duet-date-picker>\nPlease note that you need to also import duet.css separately if you want to use the default theme. See theming section for more information.\nUsage with React\nWith an application built using the create-react-app script the easiest way to include Duet Date Picker is to call defineCustomElements(window) from the index.js file:\n// Import Duet Date Picker\nimport { defineCustomElements } from \"@duetds/date-picker/dist/loader\";\n\n// ...\n// Register Duet Date Picker\ndefineCustomElements(window);\nThen you can create a thin React wrapper component to handle listening for events, cleanup, passing properties etc:\nimport React, { useEffect, useRef } from \"react\";\n\nfunction useListener(ref, eventName, handler) {\n  useEffect(() => {\n    if (ref.current) {\n      const element = ref.current;\n      element.addEventListener(eventName, handler)\n      return () => element.removeEventListener(eventName, handler)\n    }\n  }, [eventName, handler, ref])\n}\n\nexport function DatePicker({\n  onChange,\n  onFocus,\n  onBlur,\n  dateAdapter,\n  localization,\n  ...props\n}) {\n  const ref = useRef(null)\n\n  useListener(ref, \"duetChange\", onChange)\n  useListener(ref, \"duetFocus\", onFocus)\n  useListener(ref, \"duetBlur\", onBlur)\n\n  useEffect(() => {\n    ref.current.localization = localization\n    ref.current.dateAdapter = dateAdapter\n  }, [localization, dateAdapter])\n\n  return <duet-date-picker ref={ref} {...props}></duet-date-picker>\n}\nThen the wrapper can be used like any other React component:\n<DatePicker\n  value=\"2020-08-24\"\n  onChange={e => console.log(e.detail)}\n/>\nPlease note that you need to also import duet.css separately if you want to use the default theme. See theming section for more information.\nUsage with Ember\nDuet Date Picker can be easily integrated into Ember thanks to the ember-cli-stencil addon that handles:\n\nImporting the required files into your vendor.js\nCopying the component definitions into your assets directory\nOptionally generating a wrapper component for improved compatibility with older Ember versions\n\nStart by installing the Ember addon:\nember install ember-cli-stencil\nWhen you build your application, Stencil collections in your dependencies will be automatically discovered and pulled into your application. For more information, see ember-cli-stencil documentation.\nIE11 and Edge 17/18 polyfills\nIf you want the Duet Date Picker custom element to work on older browser, you need to add the applyPolyfills() that surround the defineCustomElements() function:\nimport { applyPolyfills, defineCustomElements } from \"@duetds/date-picker/lib/loader\";\n// ...\napplyPolyfills().then(() => {\n  defineCustomElements(window)\n})\nUsing events\nWe encourage the use of DOM events, but additionally provide custom events to make handling of certain event types easier. All custom events are documented in this same readme under the “Events” heading.\nDuet Date Picker provides e.g. a custom event called duetChange. This custom event includes an object called detail which includes for example the selected date:\n// Select the date picker component\nconst date = document.querySelector(\"duet-date-picker\")\n\n// Listen for when date is selected\ndate.addEventListener(\"duetChange\", function(e) {\n  console.log(\"selected date\", e.detail.valueAsDate)\n})\nThe console output for the above code looks like this:\nselected date Sat Aug 15 2020 00:00:00 GMT+0300 (Eastern European Summer Time)\nTheming\nDuet Date Picker uses CSS Custom Properties to make it easy to theme the picker. The component ships with a default theme that you can import either from the NPM package or directly from a CDN like JSDelivr:\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@duetds/date-picker@1.0.2/dist/duet/themes/default.css\" />\nThe above CSS file provides the following Custom Properties that you can override with your own properties:\n:root {\n  --duet-color-primary: #005fcc;\n  --duet-color-text: #333;\n  --duet-color-text-active: #fff;\n  --duet-color-button: #f5f5f5;\n  --duet-color-surface: #fff;\n  --duet-color-overlay: rgba(0, 0, 0, 0.8);\n\n  --duet-font: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n  --duet-font-normal: 400;\n  --duet-font-bold: 600;\n\n  --duet-radius: 4px;\n  --duet-z-index: 600;\n}\nIf you wish to customize any of the default properties shown above, we recommend to NOT import or link to the provided CSS, but instead copying the above code into your own stylesheet and replacing the values used there.\nAdditionally, you’re able to override Duet Date Picker’s default styles by using e.g. .duet-date__input selector in your own stylesheet. This allows you to give the form input and e.g. date picker toggle button a visual look that matches the rest of your website.\nLocalization\nDuet Date Picker offers full support for localization. This includes the text labels and date formats used. Below is an example of a date picker that is using Finnish date format and localization.\n<label for=\"date\">Valitse päivämäärä</label>\n<duet-date-picker identifier=\"date\"></duet-date-picker>\n\n<script>\n  const picker = document.querySelector(\"duet-date-picker\")\n  const DATE_FORMAT = /^(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$/\n\n  picker.dateAdapter = {\n    parse(value = \"\", createDate) {\n      const matches = value.match(DATE_FORMAT)\n\n      if (matches) {\n        return createDate(matches[3], matches[2], matches[1])\n      }\n    },\n    format(date) {\n      return `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`\n    },\n  }\n\n  picker.localization = {\n    buttonLabel: \"Valitse päivämäärä\",\n    placeholder: \"pp.kk.vvvv\",\n    selectedDateMessage: \"Valittu päivämäärä on\",\n    prevMonthLabel: \"Edellinen kuukausi\",\n    nextMonthLabel: \"Seuraava kuukausi\",\n    monthSelectLabel: \"Kuukausi\",\n    yearSelectLabel: \"Vuosi\",\n    closeLabel: \"Sulje ikkuna\",\n    keyboardInstruction: \"Voit navigoida päivämääriä nuolinäppäimillä\",\n    calendarHeading: \"Valitse päivämäärä\",\n    dayNames: [\n      \"Sunnuntai\", \"Maanantai\", \"Tiistai\", \"Keskiviikko\",\n      \"Torstai\", \"Perjantai\", \"Lauantai\"\n    ],\n    monthNames: [\n      \"Tammikuu\", \"Helmikuu\", \"Maaliskuu\", \"Huhtikuu\",\n      \"Toukokuu\", \"Kesäkuu\", \"Heinäkuu\", \"Elokuu\",\n      \"Syyskuu\", \"Lokakuu\", \"Marraskuu\", \"Joulukuu\"\n    ],\n    monthNamesShort: [\n      \"Tammi\", \"Helmi\", \"Maalis\", \"Huhti\", \"Touko\", \"Kesä\",\n      \"Heinä\", \"Elo\", \"Syys\", \"Loka\", \"Marras\", \"Joulu\"\n    ],\n  }\n</script>\nServer side rendering\nDuet Date Picker package includes a hydrate app that is a bundle of the same components, but compiled so that they can be hydrated on a NodeJS server and generate static HTML and CSS. To get started, import the hydrate app into your server’s code like so:\nimport hydrate from \"@duetds/date-picker/hydrate\"\nIf you are using for example Eleventy, you could now add a transform into .eleventy.js configuration file that takes content as an input and processes it using Duet’s hydrate app:\neleventyConfig.addTransform(\"hydrate\", async(content, outputPath) => {\n  if (process.env.ELEVENTY_ENV == \"production\") {\n    if (outputPath.endsWith(\".html\")) {\n      try {\n        const results = await hydrate.renderToString(content, {\n          clientHydrateAnnotations: true,\n          removeScripts: false,\n          removeUnusedStyles: false\n        })\n        return results.html\n      } catch (error) {\n        return error\n      }\n    }\n  }\n  return content\n})\nThe above transform gives you server side rendered components that function without JavaScript. Please note that you need to separately pre-render the content for each theme you want to support.\nSingle file bundle\nDuet Date Picker also offers a single file bundle without the polyfills and other additional functionality included in the default output. To import that instead of the default output, use:\nimport { DuetDatePicker } from \"@duetds/date-picker/custom-element\";\n\ncustomElements.define(\"duet-date-picker\", DuetDatePicker);\nPlease note that this custom-element output does not automatically define the custom elements or apply any polyfills which is why we’re defining the custom element above ourselves.\nFor more details, please see Stencil.js documentation.\nOptimizing CDN performance\nIf you wish to make sure Duet Date Picker shows up as quickly as possible when loading the scripts from JSDelivr CDN, you can preload the key parts using link rel=\"preload\". To do this, add these tags in the <head> of your webpage before any other <script> or <link> tags:\n<link rel=\"preload\" href=\"https://cdn.jsdelivr.net/npm/@duetds/date-picker@1.0.2/dist/duet/duet.esm.js\" as=\"script\" crossorigin=\"anonymous\" />\n<link rel=\"preload\" href=\"https://cdn.jsdelivr.net/npm/@duetds/date-picker@1.0.2/dist/duet/duet-date-picker.entry.js\" as=\"script\" crossorigin=\"anonymous\" />\nIn case you’re also using one of the included themes, you can preload them the same way using the below tag:\n<link rel=\"preload\" href=\"https://cdn.jsdelivr.net/npm/@duetds/date-picker@1.0.2/dist/duet/themes/default.css\" as=\"style\" />\nContributing\nDevelopment server\n\nClone the repository by running git clone git@github.com:duetds/duet-date-picker.git.\nOnce cloned, open the directory and run npm install.\nRun npm start to get the development server and watch tasks up and running. This will also automatically open a new browser window with an example page.\nTo edit the example page’s source, see ./src/index.html.\n\nTesting and building\n\nTo run the unit, end-to-end and visual diff tests use npm run test.\nTo build the project use npm run build.\n\nPublishing the package\n\nBump version in package.json and elsewhere.\nPush your changes to Git and then run npm publish.\nTag new release by running git tag -a 1.0.0 -m \"1.0.0\".\nPush to git: git push --tags --no-verify.\n\nChangelog\n\n1.0.2: Documentation improvements.\n1.0.1: Hitting arrow keys on year select on Windows without first opening the dropdown previously causes odd results. This is now fixed.\n1.0.0: Initial release.\n\nRoadmap\n\nBetter examples on how to do date ranges, handle validation and so on.\nBetter theming and basic code examples.\nMaking it possible to pass in your own input component.\n\nLicense\nCopyright © 2020 LocalTapiola Services Ltd / Duet Design System.\nLicensed under the MIT license.\n"
          ],
          "keywords": [
            "",
            "",
            "",
            "",
            ""
          ],
          "license": [
            "/duetds/date-picker/blob/master/LICENSE"
          ]
        },
        "type": [
          "http://schema.org/SoftwareSourceCode"
        ]
      }
    ]
  },
  "twitter": {
    "image": {
      "src": "https://avatars3.githubusercontent.com/u/59133187?s=400&v=4"
    },
    "site": "@github",
    "card": "summary",
    "title": "duetds/date-picker",
    "description": "Duet Date Picker is an open source version of Duet Design System’s accessible date picker. Try live example at https://duetds.github.io/date-picker/ - duetds/date-picker"
  }
}